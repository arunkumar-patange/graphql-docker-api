type SwarmNode {
    createdAt: Date
    description: NodeDescription
    details: NodeInfo
    id: String
    managerStatus: ManagerStatus
    spec: NodeSpec
    status: NodeStatus
    updatedAt: Date
    version: SwarmVersion
}

type NodeSpec {
    availability: String
    labels: StringAnyMap
    name: String
    role: String
}

type NodeDescription {
    engine: EngineConfig
    hostname: String
    platform: Platform
    resources: Resources
}

type Platform {
    architecture: String
    os: String
}

type Resources {
    memoryBytes: Long
    nanoCpus: Long
}

type EngineConfig {
    engineVersion: String
    labels: StringAnyMap
    plugins: [EnginePlugin]
}

type EnginePlugin {
    name: String
    type: String
}

type NodeStatus {
    addr: String
    state: String
}

type ManagerStatus {
    addr: String
    leader: Boolean
    reachability: String
}

input NodeFilter {
    id: [String]
    label: [String]
    membership: [NodeMembership]
    name: [String]
    role: [NodeRole]
}

enum NodeMembership {
    accepted
    pending
}

enum NodeRole {
    manager
    worker
}

type NodeInfo {
    createdAt: String
    description: NodeDescription
    id: ID!
    managerStatus: ManagerStatus
    spec: NodeSpec
    status: NodeStatus
    updatedAt: String
    version: SwarmVersion
}